buildscript {
    ext {
    }

    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        jcenter()
        mavenCentral()
    }

    dependencies {
    }
}

plugins {
    id "application"
}

apply plugin: "java"
apply plugin: 'eclipse'
apply plugin: 'idea'

repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    jcenter()
    mavenCentral()
}

description = "样例"
group = "com.lab"
version = "1.0.0"
archivesBaseName = 'akka-quickstart'

ext {
    javaMainClass = "com.lab.AkkaQuickstart"
}

jar {
    manifest {
        attributes(
                "Main-Class": javaMainClass
        )
    }
}

application {
    mainClassName = javaMainClass
}


dependencies {
    implementation("com.typesafe.akka:akka-actor-typed_$scalaVersion:$akkaVersion")
    implementation("com.typesafe.akka:akka-slf4j_$scalaVersion:$akkaVersion")

    implementation("com.google.guava:guava:$guavaVersion")
    implementation "commons-io:commons-io:$commonsioVersion"
    implementation "org.apache.commons:commons-lang3:$commonslang3Version"
    implementation "commons-beanutils:commons-beanutils:$commonsbeanutilsVersion"
    implementation "commons-codec:commons-codec:$commonscodecVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"

    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"

    implementation("org.slf4j:slf4j-simple:$slf4jVersion")

    testImplementation("com.typesafe.akka:akka-actor-testkit-typed_$scalaVersion:$akkaVersion")
    testImplementation("junit:junit:$junitVersion")
}


run {
    standardInput = System.in
}


wrapper {
    gradleVersion = '6.1'
    distributionType = Wrapper.DistributionType.ALL
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked"
    options.compilerArgs << "-Xlint:deprecation"
}

tasks.withType(Test) {
    testLogging {
        events 'started', 'passed'
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// java编译的时候缺省状态下会因为中文字符而失败
[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

compileJava {
    options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
}

test {
    testLogging.showStandardStreams = true
}

apply from: "$rootDir/gradle/config/scripts/idea.gradle"
apply from: "$rootDir/gradle/config/scripts/coverage.gradle"

coverage.excludePackages = [
]

coverage.excludeClasses = [
]


task runWithJavaExec(type: JavaExec) {
    group = "Execution"
    description = "Run the main class with JavaExecTask"
    classpath = sourceSets.main.runtimeClasspath
    main = javaMainClass
}

task runWithExec(type: Exec) {
    dependsOn build
    group = "Execution"
    description = "Run the main class with ExecTask"
    commandLine "java", "-classpath", sourceSets.main.runtimeClasspath.getAsPath(), javaMainClass
}

task runWithExecJarExecutable(type: Exec) {
    dependsOn jar
    group = "Execution"
    description = "Run the output executable jar with ExecTask"
    commandLine "java", "-jar", jar.archiveFile.get()
}

task runWithExecJarOnClassPath(type: Exec) {
    dependsOn jar
    group = "Execution"
    description = "Run the mainClass from the output jar in classpath with ExecTask"
    commandLine "java", "-classpath", jar.archiveFile.get(), javaMainClass
}
